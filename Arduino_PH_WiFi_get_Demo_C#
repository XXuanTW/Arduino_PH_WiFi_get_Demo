#include <Wire.h>
#define SLAVE_ADDRESS 0x40   // Define the i2c address
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);

byte sendInfo[3];
//ESP
#include <SoftwareSerial.h>
#define _baudrate   115200
#define _rxpin      4
#define _txpin      5
SoftwareSerial debug( _rxpin, _txpin ); // RX, TX
//*-- IoT Information
#define SSID "z5"
#define PASS "00000000"
#define IP "184.106.153.149" // ThingSpeak IP Address: 184.106.153.149
String GET = "GET /update?key=EOESVNI8IRX5D01N";

int battery=0;

float temp;   

void setup() {
   Wire.begin(SLAVE_ADDRESS); 
   lcd.init();   // initialize the lcd 
   lcd.init();
   lcd.backlight();
  //ESP
    Serial.begin( _baudrate );
    debug.begin( _baudrate );
    sendDebug("AT");
    Loding("sent AT");
    connectWiFi();
}
void loop() {
    delay(5000);   // 60 second
    // LCD
    
 int V1 = analogRead(battery);  
 float vol = V1*(5.0 / 1023.0);               
  if (vol == temp){
    temp = vol;
  }else{ 
    Serial.print(vol);
    Serial.println(" V");
    temp = vol;
    delay(1000);
  }

  float ph=2.75*(vol-1)+1;
     lcd.setCursor(0, 0);
     lcd.print("pH=");       
     lcd.print(ph,2);       
     lcd.setCursor(0, 1);            
     //lcd.print("V=");       
     //lcd.print(vol,2);       
SentOnCloud( String(ph));
}
boolean connectWiFi()
{
    debug.println("AT+CWMODE=1");
    Wifi_connect();
}

void SentOnCloud( String ph )
{
    // 設定 ESP8266 作為 Client 端
    String cmd = "AT+CIPSTART=\"TCP\",\"";
    cmd += IP;
    cmd += "\",80";
    sendDebug(cmd);
    if( debug.find( "Error" ) )
    {
        Serial.print( "RECEIVED: Error\nExit1" );
        return;
    }
    cmd = GET + "&field1=" +ph+ "\r\n";
    debug.print( "AT+CIPSEND=" );
    debug.println( cmd.length() );
    if(debug.find( ">" ) )
    {
        Serial.print(">");
        Serial.print(cmd);
        debug.print(cmd);
    }
    else
    {
        debug.print( "AT+CIPCLOSE" );
    }
    if( debug.find("OK") )
    {
        Serial.println( "RECEIVED: OK" );
    }
    else
    {
        Serial.println( "RECEIVED: Error\nExit2" );
    }
}
void Wifi_connect()
{
    String cmd="AT+CWJAP=\"";
    cmd+=SSID;
    cmd+="\",\"";
    cmd+=PASS;
    cmd+="\"";
    sendDebug(cmd);
    Loding("Wifi_connect");
}
void Loding(String state){
    for (int timeout=0 ; timeout<10 ; timeout++)
    {
      if(debug.find("OK"))
      {
          Serial.println("RECEIVED: OK");
          break;
      }
      else if(timeout==9){
        Serial.print( state );
        Serial.println(" fail...\nExit2");
      }
      else
      {
        Serial.print("Wifi Loading...");
        delay(500);
      }
    }
}
void sendDebug(String cmd)
{
    Serial.print("SEND: ");
    Serial.println(cmd);
    debug.println(cmd);
} 
